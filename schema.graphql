type Vault @entity {
  id: ID!

  # Public Attributes
  initialized: Boolean!
  targetFloatPercent: BigInt
  feePercent: BigInt

  # Underlying
  underlying: Bytes! # address
  underlyingSymbol: String!
  underlyingDecimals: Int!
  underlyingIsWeth: Boolean!

  #Harvest data
  lastHarvestTimestamp: BigInt
  harvestWindow: BigInt
  harvestDelay: BigInt
  nextHarvestDelay: BigInt
  lastHarvestWindowStartTimestamp: BigInt

  # Strategies
  trustedStrategies: [Strategy!]! # trusted
  # strategies: [Strategy!]! # (computed): trusted and has balance

  # Holdings/Float/Supply
  maxLockedProfit: BigInt
  totalSupply: BigInt
  totalStrategyHoldings: BigInt

  lockedProfit: BigInt
  exchangeRate: BigInt
  totalFloat: BigInt
  totalHoldings: BigInt
}

### Important to derive and rely on from subgraph

# vault.withdrawalQueue: strategy[]
# vault.strategies: strategy[] // ?: trusted & balance >= 0
# vault.trustedStrategies: strategy[] ✅

### Not important to rely on from subgraph - but will usually be synced

## Public Attributes
# vault.isInitialized: number ✅
# vault.underlyingIsWETH: bool ✅
# vault.targetFloatPercent: number ✅
# vault.feePercent: number ✅

## Harvest
# vault.lastHarvestTimestamp: number ✅
# vault.harvestDelay: number ✅
# vault.harvestWindow: number ✅
# vault.lastHarvestWindowStartTimestamp: number ✅
# vault.nextHarvestDelay: number ✅

### Not important to rely on from subgraph - realtime data can be read from contracts

## Holdings/Float/Supply - call them via contracts and update

# vault.totalStrategyHoldings: number // view : gets updated on  StrategyDeposit ✅, StrategyWithdraw ✅,  SeizeStrategy ✅ and Harvest ✅
# vault.totalSupply: number // view : gets updated on  Deposit, Withdraw, and Harvest ✅ (TODO: consider deriving this from Transfer)
# vault.maxLockedProfit: number // view: gets changed every Harvest ✅

## Update these all the fuckin time - on StrategyDeposit ✅, StrategyWithdraw ✅, SeizeStrategy ✅ and Harvest ✅, Deposit, Withdraw,
# vault.lockedProfit: number // view: ✅
# vault.exchangeRate: number // view: ✅
# vault.totalFloat: number // view: ✅
# vault.totalHoldings: number ✅
  
## Note: might implement totalFees (read on the vault contract itself

### Save for Later
# vault.balanceOf{user} // don't implement rn
# vault.balanceOfUnderlying{user} // don't implement rn

type Strategy @entity {
  id: ID!

  # ERC20
  name: String!
  symbol: String!
  balance: BigInt!

  # Public Attributes
  trusted: Boolean!
  vault: Vault!
}

# strategy.trusted ✅
# strategy.balance ✅
# strategy.name  ✅
# strategy.queueIndex (-1 or something if not in)
# strategy.vault (0x0 or something if no vault associated) ✅
