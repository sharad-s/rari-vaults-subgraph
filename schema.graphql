type Vault @entity {
  id: ID!

  # Public Attributes
  initialized: Boolean!
  targetFloatPercent: BigInt
  feePercent: BigInt

  # Underlying
  underlying: Bytes! # address
  underlyingSymbol: String!
  underlyingDecimals: Int!
  underlyingIsWeth: Boolean

  #Harvest data
  lastHarvestBlock: BigInt
  harvestWindow: BigInt
  harvestDelay: BigInt
  nextHarvestDelay: BigInt
  # lastHarvestWindowStartBlock:

  # Strategies
  trustedStrategies: [Strategy!]!
}

## Public Attributes
# vault.isInitialized: number âœ…
# vault.underlyingIsWETH: bool âœ…
# vault.targetFloatPercent: number âœ…
# vault.feePercent: number âœ…

## Harvest
# vault.lastHarvestBlockNum: number âœ…
# vault.harvestDelay: number âœ…
# vault.harvestWindow: number âœ…
# vault.lastHarvestWindowStart: number
# vault.nextHarvestDelay: number âœ…

## Holdings/Float/Supply
# vault.totalHoldings: number
# vault.totalStrategyHoldings: number
# vault.totalFloat: number
# vault.totalSupply: number

# vault.maxLockedProfit: number
# vault.lockedProfit: number // view: gets updated as much as possible?
# vault.exchangeRate: number // view: gets updated as much as possible?

# vault.balanceOf{user} // don't implement
# vault.balanceOfUnderlying{user} // don't implement

# vault.withdrawalQueue: strategy[]
# vault.activeStrategies: strategy[]
# vault.trustedStrategies: strategy[] âœ…

type Strategy @entity {
  id: ID!

  # Public Attributes
  trusted: Boolean!
  name: String!
  vault: Vault!

}

# strategy.trusted ðŸš§
# strategy.balance
# strategy.name  âœ…
# strategy.queueIndex (-1 or something if not in)
# strategy.vault (0x0 or something if no vault associated)âœ…
