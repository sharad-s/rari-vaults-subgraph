// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthorityUpdated extends ethereum.Event {
  get params(): AuthorityUpdated__Params {
    return new AuthorityUpdated__Params(this);
  }
}

export class AuthorityUpdated__Params {
  _event: AuthorityUpdated;

  constructor(event: AuthorityUpdated) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VaultDeployed extends ethereum.Event {
  get params(): VaultDeployed__Params {
    return new VaultDeployed__Params(this);
  }
}

export class VaultDeployed__Params {
  _event: VaultDeployed;

  constructor(event: VaultDeployed) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlying(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VaultFactory extends ethereum.SmartContract {
  static bind(address: Address): VaultFactory {
    return new VaultFactory("VaultFactory", address);
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployVault(underlying: Address): Address {
    let result = super.call("deployVault", "deployVault(address):(address)", [
      ethereum.Value.fromAddress(underlying)
    ]);

    return result[0].toAddress();
  }

  try_deployVault(underlying: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployVault",
      "deployVault(address):(address)",
      [ethereum.Value.fromAddress(underlying)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultFromUnderlying(underlying: Address): Address {
    let result = super.call(
      "getVaultFromUnderlying",
      "getVaultFromUnderlying(address):(address)",
      [ethereum.Value.fromAddress(underlying)]
    );

    return result[0].toAddress();
  }

  try_getVaultFromUnderlying(
    underlying: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVaultFromUnderlying",
      "getVaultFromUnderlying(address):(address)",
      [ethereum.Value.fromAddress(underlying)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isVaultDeployed(vault: Address): boolean {
    let result = super.call(
      "isVaultDeployed",
      "isVaultDeployed(address):(bool)",
      [ethereum.Value.fromAddress(vault)]
    );

    return result[0].toBoolean();
  }

  try_isVaultDeployed(vault: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isVaultDeployed",
      "isVaultDeployed(address):(bool)",
      [ethereum.Value.fromAddress(vault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _authority(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployVaultCall extends ethereum.Call {
  get inputs(): DeployVaultCall__Inputs {
    return new DeployVaultCall__Inputs(this);
  }

  get outputs(): DeployVaultCall__Outputs {
    return new DeployVaultCall__Outputs(this);
  }
}

export class DeployVaultCall__Inputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get underlying(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeployVaultCall__Outputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get newAuthority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}
