// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorityUpdated extends ethereum.Event {
  get params(): AuthorityUpdated__Params {
    return new AuthorityUpdated__Params(this);
  }
}

export class AuthorityUpdated__Params {
  _event: AuthorityUpdated;

  constructor(event: AuthorityUpdated) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeePercentUpdated extends ethereum.Event {
  get params(): FeePercentUpdated__Params {
    return new FeePercentUpdated__Params(this);
  }
}

export class FeePercentUpdated__Params {
  _event: FeePercentUpdated;

  constructor(event: FeePercentUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFeePercent(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeesClaimed extends ethereum.Event {
  get params(): FeesClaimed__Params {
    return new FeesClaimed__Params(this);
  }
}

export class FeesClaimed__Params {
  _event: FeesClaimed;

  constructor(event: FeesClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rvTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategies(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class HarvestDelayUpdateScheduled extends ethereum.Event {
  get params(): HarvestDelayUpdateScheduled__Params {
    return new HarvestDelayUpdateScheduled__Params(this);
  }
}

export class HarvestDelayUpdateScheduled__Params {
  _event: HarvestDelayUpdateScheduled;

  constructor(event: HarvestDelayUpdateScheduled) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newHarvestDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HarvestDelayUpdated extends ethereum.Event {
  get params(): HarvestDelayUpdated__Params {
    return new HarvestDelayUpdated__Params(this);
  }
}

export class HarvestDelayUpdated__Params {
  _event: HarvestDelayUpdated;

  constructor(event: HarvestDelayUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newHarvestDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HarvestWindowUpdated extends ethereum.Event {
  get params(): HarvestWindowUpdated__Params {
    return new HarvestWindowUpdated__Params(this);
  }
}

export class HarvestWindowUpdated__Params {
  _event: HarvestWindowUpdated;

  constructor(event: HarvestWindowUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newHarvestWindow(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StrategyDeposit extends ethereum.Event {
  get params(): StrategyDeposit__Params {
    return new StrategyDeposit__Params(this);
  }
}

export class StrategyDeposit__Params {
  _event: StrategyDeposit;

  constructor(event: StrategyDeposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StrategyDistrusted extends ethereum.Event {
  get params(): StrategyDistrusted__Params {
    return new StrategyDistrusted__Params(this);
  }
}

export class StrategyDistrusted__Params {
  _event: StrategyDistrusted;

  constructor(event: StrategyDistrusted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StrategySeized extends ethereum.Event {
  get params(): StrategySeized__Params {
    return new StrategySeized__Params(this);
  }
}

export class StrategySeized__Params {
  _event: StrategySeized;

  constructor(event: StrategySeized) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StrategyTrusted extends ethereum.Event {
  get params(): StrategyTrusted__Params {
    return new StrategyTrusted__Params(this);
  }
}

export class StrategyTrusted__Params {
  _event: StrategyTrusted;

  constructor(event: StrategyTrusted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StrategyWithdrawal extends ethereum.Event {
  get params(): StrategyWithdrawal__Params {
    return new StrategyWithdrawal__Params(this);
  }
}

export class StrategyWithdrawal__Params {
  _event: StrategyWithdrawal;

  constructor(event: StrategyWithdrawal) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TargetFloatPercentUpdated extends ethereum.Event {
  get params(): TargetFloatPercentUpdated__Params {
    return new TargetFloatPercentUpdated__Params(this);
  }
}

export class TargetFloatPercentUpdated__Params {
  _event: TargetFloatPercentUpdated;

  constructor(event: TargetFloatPercentUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTargetFloatPercent(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnderlyingIsWETHUpdated extends ethereum.Event {
  get params(): UnderlyingIsWETHUpdated__Params {
    return new UnderlyingIsWETHUpdated__Params(this);
  }
}

export class UnderlyingIsWETHUpdated__Params {
  _event: UnderlyingIsWETHUpdated;

  constructor(event: UnderlyingIsWETHUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newUnderlyingIsWETH(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalQueueIndexReplaced extends ethereum.Event {
  get params(): WithdrawalQueueIndexReplaced__Params {
    return new WithdrawalQueueIndexReplaced__Params(this);
  }
}

export class WithdrawalQueueIndexReplaced__Params {
  _event: WithdrawalQueueIndexReplaced;

  constructor(event: WithdrawalQueueIndexReplaced) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get replacedStrategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get replacementStrategy(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class WithdrawalQueueIndexReplacedWithTip extends ethereum.Event {
  get params(): WithdrawalQueueIndexReplacedWithTip__Params {
    return new WithdrawalQueueIndexReplacedWithTip__Params(this);
  }
}

export class WithdrawalQueueIndexReplacedWithTip__Params {
  _event: WithdrawalQueueIndexReplacedWithTip;

  constructor(event: WithdrawalQueueIndexReplacedWithTip) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get replacedStrategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get previousTipStrategy(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class WithdrawalQueueIndexesSwapped extends ethereum.Event {
  get params(): WithdrawalQueueIndexesSwapped__Params {
    return new WithdrawalQueueIndexesSwapped__Params(this);
  }
}

export class WithdrawalQueueIndexesSwapped__Params {
  _event: WithdrawalQueueIndexesSwapped;

  constructor(event: WithdrawalQueueIndexesSwapped) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get index2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newStrategy1(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get newStrategy2(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class WithdrawalQueuePopped extends ethereum.Event {
  get params(): WithdrawalQueuePopped__Params {
    return new WithdrawalQueuePopped__Params(this);
  }
}

export class WithdrawalQueuePopped__Params {
  _event: WithdrawalQueuePopped;

  constructor(event: WithdrawalQueuePopped) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poppedStrategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawalQueuePushed extends ethereum.Event {
  get params(): WithdrawalQueuePushed__Params {
    return new WithdrawalQueuePushed__Params(this);
  }
}

export class WithdrawalQueuePushed__Params {
  _event: WithdrawalQueuePushed;

  constructor(event: WithdrawalQueuePushed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pushedStrategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawalQueueSet extends ethereum.Event {
  get params(): WithdrawalQueueSet__Params {
    return new WithdrawalQueueSet__Params(this);
  }
}

export class WithdrawalQueueSet__Params {
  _event: WithdrawalQueueSet;

  constructor(event: WithdrawalQueueSet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get replacedWithdrawalQueue(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class Vault__getStrategyDataResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  BASE_UNIT(): BigInt {
    let result = super.call("BASE_UNIT", "BASE_UNIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_UNIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_UNIT", "BASE_UNIT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UNDERLYING(): Address {
    let result = super.call("UNDERLYING", "UNDERLYING():(address)", []);

    return result[0].toAddress();
  }

  try_UNDERLYING(): ethereum.CallResult<Address> {
    let result = super.tryCall("UNDERLYING", "UNDERLYING():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(user: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feePercent(): BigInt {
    let result = super.call("feePercent", "feePercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePercent", "feePercent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStrategyData(param0: Address): Vault__getStrategyDataResult {
    let result = super.call(
      "getStrategyData",
      "getStrategyData(address):(bool,uint248)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Vault__getStrategyDataResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getStrategyData(
    param0: Address
  ): ethereum.CallResult<Vault__getStrategyDataResult> {
    let result = super.tryCall(
      "getStrategyData",
      "getStrategyData(address):(bool,uint248)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getStrategyDataResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getWithdrawalQueue(): Array<Address> {
    let result = super.call(
      "getWithdrawalQueue",
      "getWithdrawalQueue():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getWithdrawalQueue(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWithdrawalQueue",
      "getWithdrawalQueue():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  harvestDelay(): BigInt {
    let result = super.call("harvestDelay", "harvestDelay():(uint64)", []);

    return result[0].toBigInt();
  }

  try_harvestDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("harvestDelay", "harvestDelay():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestWindow(): BigInt {
    let result = super.call("harvestWindow", "harvestWindow():(uint128)", []);

    return result[0].toBigInt();
  }

  try_harvestWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "harvestWindow",
      "harvestWindow():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastHarvest(): BigInt {
    let result = super.call("lastHarvest", "lastHarvest():(uint64)", []);

    return result[0].toBigInt();
  }

  try_lastHarvest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastHarvest", "lastHarvest():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastHarvestWindowStart(): BigInt {
    let result = super.call(
      "lastHarvestWindowStart",
      "lastHarvestWindowStart():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastHarvestWindowStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastHarvestWindowStart",
      "lastHarvestWindowStart():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedProfit(): BigInt {
    let result = super.call("lockedProfit", "lockedProfit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedProfit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockedProfit", "lockedProfit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLockedProfit(): BigInt {
    let result = super.call(
      "maxLockedProfit",
      "maxLockedProfit():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLockedProfit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLockedProfit",
      "maxLockedProfit():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextHarvestDelay(): BigInt {
    let result = super.call(
      "nextHarvestDelay",
      "nextHarvestDelay():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextHarvestDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextHarvestDelay",
      "nextHarvestDelay():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  targetFloatPercent(): BigInt {
    let result = super.call(
      "targetFloatPercent",
      "targetFloatPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetFloatPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetFloatPercent",
      "targetFloatPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFloat(): BigInt {
    let result = super.call("totalFloat", "totalFloat():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFloat(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFloat", "totalFloat():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalHoldings(): BigInt {
    let result = super.call("totalHoldings", "totalHoldings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalHoldings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHoldings",
      "totalHoldings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStrategyHoldings(): BigInt {
    let result = super.call(
      "totalStrategyHoldings",
      "totalStrategyHoldings():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStrategyHoldings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStrategyHoldings",
      "totalStrategyHoldings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlyingIsWETH(): boolean {
    let result = super.call(
      "underlyingIsWETH",
      "underlyingIsWETH():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_underlyingIsWETH(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "underlyingIsWETH",
      "underlyingIsWETH():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawalQueue(param0: BigInt): Address {
    let result = super.call(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_withdrawalQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _UNDERLYING(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get rvTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositIntoStrategyCall extends ethereum.Call {
  get inputs(): DepositIntoStrategyCall__Inputs {
    return new DepositIntoStrategyCall__Inputs(this);
  }

  get outputs(): DepositIntoStrategyCall__Outputs {
    return new DepositIntoStrategyCall__Outputs(this);
  }
}

export class DepositIntoStrategyCall__Inputs {
  _call: DepositIntoStrategyCall;

  constructor(call: DepositIntoStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositIntoStrategyCall__Outputs {
  _call: DepositIntoStrategyCall;

  constructor(call: DepositIntoStrategyCall) {
    this._call = call;
  }
}

export class DestroyCall extends ethereum.Call {
  get inputs(): DestroyCall__Inputs {
    return new DestroyCall__Inputs(this);
  }

  get outputs(): DestroyCall__Outputs {
    return new DestroyCall__Outputs(this);
  }
}

export class DestroyCall__Inputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class DestroyCall__Outputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class DistrustStrategyCall extends ethereum.Call {
  get inputs(): DistrustStrategyCall__Inputs {
    return new DistrustStrategyCall__Inputs(this);
  }

  get outputs(): DistrustStrategyCall__Outputs {
    return new DistrustStrategyCall__Outputs(this);
  }
}

export class DistrustStrategyCall__Inputs {
  _call: DistrustStrategyCall;

  constructor(call: DistrustStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DistrustStrategyCall__Outputs {
  _call: DistrustStrategyCall;

  constructor(call: DistrustStrategyCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get strategies(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PopFromWithdrawalQueueCall extends ethereum.Call {
  get inputs(): PopFromWithdrawalQueueCall__Inputs {
    return new PopFromWithdrawalQueueCall__Inputs(this);
  }

  get outputs(): PopFromWithdrawalQueueCall__Outputs {
    return new PopFromWithdrawalQueueCall__Outputs(this);
  }
}

export class PopFromWithdrawalQueueCall__Inputs {
  _call: PopFromWithdrawalQueueCall;

  constructor(call: PopFromWithdrawalQueueCall) {
    this._call = call;
  }
}

export class PopFromWithdrawalQueueCall__Outputs {
  _call: PopFromWithdrawalQueueCall;

  constructor(call: PopFromWithdrawalQueueCall) {
    this._call = call;
  }
}

export class PushToWithdrawalQueueCall extends ethereum.Call {
  get inputs(): PushToWithdrawalQueueCall__Inputs {
    return new PushToWithdrawalQueueCall__Inputs(this);
  }

  get outputs(): PushToWithdrawalQueueCall__Outputs {
    return new PushToWithdrawalQueueCall__Outputs(this);
  }
}

export class PushToWithdrawalQueueCall__Inputs {
  _call: PushToWithdrawalQueueCall;

  constructor(call: PushToWithdrawalQueueCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PushToWithdrawalQueueCall__Outputs {
  _call: PushToWithdrawalQueueCall;

  constructor(call: PushToWithdrawalQueueCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get rvTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class ReplaceWithdrawalQueueIndexCall extends ethereum.Call {
  get inputs(): ReplaceWithdrawalQueueIndexCall__Inputs {
    return new ReplaceWithdrawalQueueIndexCall__Inputs(this);
  }

  get outputs(): ReplaceWithdrawalQueueIndexCall__Outputs {
    return new ReplaceWithdrawalQueueIndexCall__Outputs(this);
  }
}

export class ReplaceWithdrawalQueueIndexCall__Inputs {
  _call: ReplaceWithdrawalQueueIndexCall;

  constructor(call: ReplaceWithdrawalQueueIndexCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get replacementStrategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReplaceWithdrawalQueueIndexCall__Outputs {
  _call: ReplaceWithdrawalQueueIndexCall;

  constructor(call: ReplaceWithdrawalQueueIndexCall) {
    this._call = call;
  }
}

export class ReplaceWithdrawalQueueIndexWithTipCall extends ethereum.Call {
  get inputs(): ReplaceWithdrawalQueueIndexWithTipCall__Inputs {
    return new ReplaceWithdrawalQueueIndexWithTipCall__Inputs(this);
  }

  get outputs(): ReplaceWithdrawalQueueIndexWithTipCall__Outputs {
    return new ReplaceWithdrawalQueueIndexWithTipCall__Outputs(this);
  }
}

export class ReplaceWithdrawalQueueIndexWithTipCall__Inputs {
  _call: ReplaceWithdrawalQueueIndexWithTipCall;

  constructor(call: ReplaceWithdrawalQueueIndexWithTipCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReplaceWithdrawalQueueIndexWithTipCall__Outputs {
  _call: ReplaceWithdrawalQueueIndexWithTipCall;

  constructor(call: ReplaceWithdrawalQueueIndexWithTipCall) {
    this._call = call;
  }
}

export class SeizeStrategyCall extends ethereum.Call {
  get inputs(): SeizeStrategyCall__Inputs {
    return new SeizeStrategyCall__Inputs(this);
  }

  get outputs(): SeizeStrategyCall__Outputs {
    return new SeizeStrategyCall__Outputs(this);
  }
}

export class SeizeStrategyCall__Inputs {
  _call: SeizeStrategyCall;

  constructor(call: SeizeStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SeizeStrategyCall__Outputs {
  _call: SeizeStrategyCall;

  constructor(call: SeizeStrategyCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get newAuthority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetFeePercentCall extends ethereum.Call {
  get inputs(): SetFeePercentCall__Inputs {
    return new SetFeePercentCall__Inputs(this);
  }

  get outputs(): SetFeePercentCall__Outputs {
    return new SetFeePercentCall__Outputs(this);
  }
}

export class SetFeePercentCall__Inputs {
  _call: SetFeePercentCall;

  constructor(call: SetFeePercentCall) {
    this._call = call;
  }

  get newFeePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeePercentCall__Outputs {
  _call: SetFeePercentCall;

  constructor(call: SetFeePercentCall) {
    this._call = call;
  }
}

export class SetHarvestDelayCall extends ethereum.Call {
  get inputs(): SetHarvestDelayCall__Inputs {
    return new SetHarvestDelayCall__Inputs(this);
  }

  get outputs(): SetHarvestDelayCall__Outputs {
    return new SetHarvestDelayCall__Outputs(this);
  }
}

export class SetHarvestDelayCall__Inputs {
  _call: SetHarvestDelayCall;

  constructor(call: SetHarvestDelayCall) {
    this._call = call;
  }

  get newHarvestDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHarvestDelayCall__Outputs {
  _call: SetHarvestDelayCall;

  constructor(call: SetHarvestDelayCall) {
    this._call = call;
  }
}

export class SetHarvestWindowCall extends ethereum.Call {
  get inputs(): SetHarvestWindowCall__Inputs {
    return new SetHarvestWindowCall__Inputs(this);
  }

  get outputs(): SetHarvestWindowCall__Outputs {
    return new SetHarvestWindowCall__Outputs(this);
  }
}

export class SetHarvestWindowCall__Inputs {
  _call: SetHarvestWindowCall;

  constructor(call: SetHarvestWindowCall) {
    this._call = call;
  }

  get newHarvestWindow(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHarvestWindowCall__Outputs {
  _call: SetHarvestWindowCall;

  constructor(call: SetHarvestWindowCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetTargetFloatPercentCall extends ethereum.Call {
  get inputs(): SetTargetFloatPercentCall__Inputs {
    return new SetTargetFloatPercentCall__Inputs(this);
  }

  get outputs(): SetTargetFloatPercentCall__Outputs {
    return new SetTargetFloatPercentCall__Outputs(this);
  }
}

export class SetTargetFloatPercentCall__Inputs {
  _call: SetTargetFloatPercentCall;

  constructor(call: SetTargetFloatPercentCall) {
    this._call = call;
  }

  get newTargetFloatPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTargetFloatPercentCall__Outputs {
  _call: SetTargetFloatPercentCall;

  constructor(call: SetTargetFloatPercentCall) {
    this._call = call;
  }
}

export class SetUnderlyingIsWETHCall extends ethereum.Call {
  get inputs(): SetUnderlyingIsWETHCall__Inputs {
    return new SetUnderlyingIsWETHCall__Inputs(this);
  }

  get outputs(): SetUnderlyingIsWETHCall__Outputs {
    return new SetUnderlyingIsWETHCall__Outputs(this);
  }
}

export class SetUnderlyingIsWETHCall__Inputs {
  _call: SetUnderlyingIsWETHCall;

  constructor(call: SetUnderlyingIsWETHCall) {
    this._call = call;
  }

  get newUnderlyingIsWETH(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetUnderlyingIsWETHCall__Outputs {
  _call: SetUnderlyingIsWETHCall;

  constructor(call: SetUnderlyingIsWETHCall) {
    this._call = call;
  }
}

export class SetWithdrawalQueueCall extends ethereum.Call {
  get inputs(): SetWithdrawalQueueCall__Inputs {
    return new SetWithdrawalQueueCall__Inputs(this);
  }

  get outputs(): SetWithdrawalQueueCall__Outputs {
    return new SetWithdrawalQueueCall__Outputs(this);
  }
}

export class SetWithdrawalQueueCall__Inputs {
  _call: SetWithdrawalQueueCall;

  constructor(call: SetWithdrawalQueueCall) {
    this._call = call;
  }

  get newQueue(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetWithdrawalQueueCall__Outputs {
  _call: SetWithdrawalQueueCall;

  constructor(call: SetWithdrawalQueueCall) {
    this._call = call;
  }
}

export class SwapWithdrawalQueueIndexesCall extends ethereum.Call {
  get inputs(): SwapWithdrawalQueueIndexesCall__Inputs {
    return new SwapWithdrawalQueueIndexesCall__Inputs(this);
  }

  get outputs(): SwapWithdrawalQueueIndexesCall__Outputs {
    return new SwapWithdrawalQueueIndexesCall__Outputs(this);
  }
}

export class SwapWithdrawalQueueIndexesCall__Inputs {
  _call: SwapWithdrawalQueueIndexesCall;

  constructor(call: SwapWithdrawalQueueIndexesCall) {
    this._call = call;
  }

  get index1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get index2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SwapWithdrawalQueueIndexesCall__Outputs {
  _call: SwapWithdrawalQueueIndexesCall;

  constructor(call: SwapWithdrawalQueueIndexesCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TrustStrategyCall extends ethereum.Call {
  get inputs(): TrustStrategyCall__Inputs {
    return new TrustStrategyCall__Inputs(this);
  }

  get outputs(): TrustStrategyCall__Outputs {
    return new TrustStrategyCall__Outputs(this);
  }
}

export class TrustStrategyCall__Inputs {
  _call: TrustStrategyCall;

  constructor(call: TrustStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TrustStrategyCall__Outputs {
  _call: TrustStrategyCall;

  constructor(call: TrustStrategyCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawFromStrategyCall extends ethereum.Call {
  get inputs(): WithdrawFromStrategyCall__Inputs {
    return new WithdrawFromStrategyCall__Inputs(this);
  }

  get outputs(): WithdrawFromStrategyCall__Outputs {
    return new WithdrawFromStrategyCall__Outputs(this);
  }
}

export class WithdrawFromStrategyCall__Inputs {
  _call: WithdrawFromStrategyCall;

  constructor(call: WithdrawFromStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromStrategyCall__Outputs {
  _call: WithdrawFromStrategyCall;

  constructor(call: WithdrawFromStrategyCall) {
    this._call = call;
  }
}
