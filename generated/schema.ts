// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    return value.toBoolean();
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }

  get targetFloatPercent(): BigInt | null {
    let value = this.get("targetFloatPercent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set targetFloatPercent(value: BigInt | null) {
    if (value === null) {
      this.unset("targetFloatPercent");
    } else {
      this.set("targetFloatPercent", Value.fromBigInt(value as BigInt));
    }
  }

  get feePercent(): BigInt | null {
    let value = this.get("feePercent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePercent(value: BigInt | null) {
    if (value === null) {
      this.unset("feePercent");
    } else {
      this.set("feePercent", Value.fromBigInt(value as BigInt));
    }
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get underlyingSymbol(): string {
    let value = this.get("underlyingSymbol");
    return value.toString();
  }

  set underlyingSymbol(value: string) {
    this.set("underlyingSymbol", Value.fromString(value));
  }

  get underlyingDecimals(): i32 {
    let value = this.get("underlyingDecimals");
    return value.toI32();
  }

  set underlyingDecimals(value: i32) {
    this.set("underlyingDecimals", Value.fromI32(value));
  }

  get underlyingIsWeth(): boolean {
    let value = this.get("underlyingIsWeth");
    return value.toBoolean();
  }

  set underlyingIsWeth(value: boolean) {
    this.set("underlyingIsWeth", Value.fromBoolean(value));
  }

  get lastHarvestTimestamp(): BigInt | null {
    let value = this.get("lastHarvestTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastHarvestTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("lastHarvestTimestamp");
    } else {
      this.set("lastHarvestTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get harvestWindow(): BigInt | null {
    let value = this.get("harvestWindow");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set harvestWindow(value: BigInt | null) {
    if (value === null) {
      this.unset("harvestWindow");
    } else {
      this.set("harvestWindow", Value.fromBigInt(value as BigInt));
    }
  }

  get harvestDelay(): BigInt | null {
    let value = this.get("harvestDelay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set harvestDelay(value: BigInt | null) {
    if (value === null) {
      this.unset("harvestDelay");
    } else {
      this.set("harvestDelay", Value.fromBigInt(value as BigInt));
    }
  }

  get nextHarvestDelay(): BigInt | null {
    let value = this.get("nextHarvestDelay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextHarvestDelay(value: BigInt | null) {
    if (value === null) {
      this.unset("nextHarvestDelay");
    } else {
      this.set("nextHarvestDelay", Value.fromBigInt(value as BigInt));
    }
  }

  get lastHarvestWindowStartTimestamp(): BigInt | null {
    let value = this.get("lastHarvestWindowStartTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastHarvestWindowStartTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("lastHarvestWindowStartTimestamp");
    } else {
      this.set(
        "lastHarvestWindowStartTimestamp",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get trustedStrategies(): Array<string> {
    let value = this.get("trustedStrategies");
    return value.toStringArray();
  }

  set trustedStrategies(value: Array<string>) {
    this.set("trustedStrategies", Value.fromStringArray(value));
  }

  get maxLockedProfit(): BigInt | null {
    let value = this.get("maxLockedProfit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxLockedProfit(value: BigInt | null) {
    if (value === null) {
      this.unset("maxLockedProfit");
    } else {
      this.set("maxLockedProfit", Value.fromBigInt(value as BigInt));
    }
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(value as BigInt));
    }
  }

  get totalStrategyHoldings(): BigInt | null {
    let value = this.get("totalStrategyHoldings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalStrategyHoldings(value: BigInt | null) {
    if (value === null) {
      this.unset("totalStrategyHoldings");
    } else {
      this.set("totalStrategyHoldings", Value.fromBigInt(value as BigInt));
    }
  }

  get lockedProfit(): BigInt | null {
    let value = this.get("lockedProfit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedProfit(value: BigInt | null) {
    if (value === null) {
      this.unset("lockedProfit");
    } else {
      this.set("lockedProfit", Value.fromBigInt(value as BigInt));
    }
  }

  get exchangeRate(): BigInt | null {
    let value = this.get("exchangeRate");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exchangeRate(value: BigInt | null) {
    if (value === null) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigInt(value as BigInt));
    }
  }

  get totalFloat(): BigInt | null {
    let value = this.get("totalFloat");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalFloat(value: BigInt | null) {
    if (value === null) {
      this.unset("totalFloat");
    } else {
      this.set("totalFloat", Value.fromBigInt(value as BigInt));
    }
  }

  get totalHoldings(): BigInt | null {
    let value = this.get("totalHoldings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalHoldings(value: BigInt | null) {
    if (value === null) {
      this.unset("totalHoldings");
    } else {
      this.set("totalHoldings", Value.fromBigInt(value as BigInt));
    }
  }

  get withdrawalQueue(): Array<string> {
    let value = this.get("withdrawalQueue");
    return value.toStringArray();
  }

  set withdrawalQueue(value: Array<string>) {
    this.set("withdrawalQueue", Value.fromStringArray(value));
  }
}

export class Strategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Strategy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Strategy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Strategy", id.toString(), this);
  }

  static load(id: string): Strategy | null {
    return store.get("Strategy", id) as Strategy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get trusted(): boolean {
    let value = this.get("trusted");
    return value.toBoolean();
  }

  set trusted(value: boolean) {
    this.set("trusted", Value.fromBoolean(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }
}
