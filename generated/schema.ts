// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    return value.toBoolean();
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }

  get targetFloatPercent(): BigInt | null {
    let value = this.get("targetFloatPercent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set targetFloatPercent(value: BigInt | null) {
    if (value === null) {
      this.unset("targetFloatPercent");
    } else {
      this.set("targetFloatPercent", Value.fromBigInt(value as BigInt));
    }
  }

  get feePercent(): BigInt | null {
    let value = this.get("feePercent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePercent(value: BigInt | null) {
    if (value === null) {
      this.unset("feePercent");
    } else {
      this.set("feePercent", Value.fromBigInt(value as BigInt));
    }
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get underlyingSymbol(): string {
    let value = this.get("underlyingSymbol");
    return value.toString();
  }

  set underlyingSymbol(value: string) {
    this.set("underlyingSymbol", Value.fromString(value));
  }

  get underlyingDecimals(): i32 {
    let value = this.get("underlyingDecimals");
    return value.toI32();
  }

  set underlyingDecimals(value: i32) {
    this.set("underlyingDecimals", Value.fromI32(value));
  }

  get underlyingIsWeth(): boolean {
    let value = this.get("underlyingIsWeth");
    return value.toBoolean();
  }

  set underlyingIsWeth(value: boolean) {
    this.set("underlyingIsWeth", Value.fromBoolean(value));
  }

  get lastHarvestBlock(): BigInt | null {
    let value = this.get("lastHarvestBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastHarvestBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("lastHarvestBlock");
    } else {
      this.set("lastHarvestBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get harvestWindow(): BigInt | null {
    let value = this.get("harvestWindow");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set harvestWindow(value: BigInt | null) {
    if (value === null) {
      this.unset("harvestWindow");
    } else {
      this.set("harvestWindow", Value.fromBigInt(value as BigInt));
    }
  }

  get harvestDelay(): BigInt | null {
    let value = this.get("harvestDelay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set harvestDelay(value: BigInt | null) {
    if (value === null) {
      this.unset("harvestDelay");
    } else {
      this.set("harvestDelay", Value.fromBigInt(value as BigInt));
    }
  }

  get nextHarvestDelay(): BigInt | null {
    let value = this.get("nextHarvestDelay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextHarvestDelay(value: BigInt | null) {
    if (value === null) {
      this.unset("nextHarvestDelay");
    } else {
      this.set("nextHarvestDelay", Value.fromBigInt(value as BigInt));
    }
  }
}
